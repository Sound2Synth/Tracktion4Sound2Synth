#!/bin/bash -e

#========================================================
# Configure build environment
#========================================================
if [[ "$OSTYPE" == "linux-gnu" ]];          then PLATFORM=linux
elif [[ "$OSTYPE" == "darwin"* ]];          then PLATFORM=mac
elif [[ "$OSTYPE" == "msys" ]];             then PLATFORM=windows
elif [[ "$OSTYPE" == "linux-gnueabihf" ]];  then PLATFORM=pi
fi

echo PLATFORM: "$PLATFORM"

if [ -z "$PLATFORM" ]; then
    echo ERROR: Unknown platform
    exit 1
fi

ROOT=$(cd "$(dirname "$0")/.."; pwd)
echo ROOT: "$ROOT"
echo DISABLE_TOOLS: "$DISABLE_TOOLS"
echo GRAPH_UNIT_TESTS_QUICK_VALIDATE: "$GRAPH_UNIT_TESTS_QUICK_VALIDATE"

# Remove all build products
rm -rf "$ROOT/bin"


#==========================================================
# Build examples and run tests
#==========================================================
echo "INFO: Building all examples"

if [ -z "$MSBUILD_EXE" ]; then
    export MSBUILD_EXE="C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\15.0\Bin\MSBuild.exe"
fi

if [ "$PLATFORM" == "mac" ];        then "$ROOT/tests/mac/build_examples"; fi
if [ "$PLATFORM" == "windows" ];    then "$ROOT/tests/windows/build_examples.bat"; fi
if [ "$PLATFORM" == "linux" ];      then "$ROOT/tests/linux/build_examples"; fi


#==========================================================
# Run tests for specific apps
#==========================================================
function runTestApp()
{
    APP_NAME="$1"
    echo "INFO: Running tests for: $APP_NAME"

    if [ "$PLATFORM" == "mac" ]; then
        APP_ROOT=$ROOT/examples/projects/$APP_NAME/Builds/MacOSX
        APP_EXE=$APP_ROOT/build/Release/$APP_NAME
        cd "$APP_ROOT"

        xcodebuild -configuration Release LLVM_LTO=NO GCC_TREAT_WARNINGS_AS_ERRORS=YES GRAPH_UNIT_TESTS_QUICK_VALIDATE=${GRAPH_UNIT_TESTS_QUICK_VALIDATE}
        "$APP_EXE" --junit-xml-file "$ROOT/bin/test_results/TEST-${APP_NAME}.xml"
        
        if [ -n "$DISABLE_TOOLS" ]; then
            echo INFO: Skipping instrumented builds
            return
        fi

        if [ "$2" != "DISABLE_TOOLS" ]; then
            xcodebuild -configuration Release -enableAddressSanitizer YES LLVM_LTO=NO GCC_TREAT_WARNINGS_AS_ERRORS=YES GRAPH_UNIT_TESTS_QUICK_VALIDATE=${GRAPH_UNIT_TESTS_QUICK_VALIDATE}
            "$APP_EXE" --junit-xml-file "$ROOT/bin/test_results/TEST-${APP_NAME}_asan.xml"

            xcodebuild -configuration Release -enableThreadSanitizer YES LLVM_LTO=NO GCC_TREAT_WARNINGS_AS_ERRORS=YES GRAPH_UNIT_TESTS_QUICK_VALIDATE=${GRAPH_UNIT_TESTS_QUICK_VALIDATE}
            "$APP_EXE" --junit-xml-file "$ROOT/bin/test_results/TEST-${APP_NAME}_tsan.xml"

            xcodebuild analyze -quiet -configuration Release LLVM_LTO=NO
        fi
    fi

    # ==========================================================
    if [ "$PLATFORM" == "windows" ]; then
        if [ -z "$MSBUILD_EXE" ]; then
            export MSBUILD_EXE="C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\15.0\Bin\MSBuild.exe"
        fi

        APP_ROOT=$ROOT/examples/projects/$APP_NAME/Builds/VisualStudio2017
        APP_EXE=$APP_ROOT/x64/Release/ConsoleApp/$APP_NAME.exe
        cd "$APP_ROOT"

        export CL=/DGRAPH_UNIT_TESTS_QUICK_VALIDATE=${GRAPH_UNIT_TESTS_QUICK_VALIDATE}
        "$MSBUILD_EXE" "$APP_NAME.sln" -p:VisualStudioVersion=15.0 -m -p:Configuration=Release -p:Platform=x64 -p:PreferredToolArchitecture=x64

        "$APP_EXE" --junit-xml-file "$ROOT/bin/test_results/TEST-${APP_NAME}.xml"
    fi

    # ==========================================================
    if [ "$PLATFORM" == "linux" ]; then
        APP_ROOT=$ROOT/examples/projects/$APP_NAME/Builds/LinuxMakefile
        APP_EXE=$APP_ROOT/build/$APP_NAME
        cd "$APP_ROOT"

        make clean
        make CONFIG=Release -j$(nproc) TARGET_ARCH="-latomic -m64" CPPFLAGS=-DGRAPH_UNIT_TESTS_QUICK_VALIDATE=${GRAPH_UNIT_TESTS_QUICK_VALIDATE}

        "$APP_EXE" --junit-xml-file "$ROOT/bin/test_results/TEST-${APP_NAME}.xml"

        if [ -n "$DISABLE_TOOLS" ]; then
            echo INFO: Skipping instrumented builds
            return
        fi
        
        if [ "$2" != "DISABLE_TOOLS" ]; then
            if [ -z "$DISABLE_VALGRIND" ]; then
                valgrind "$APP_EXE" --junit-xml-file "$ROOT/bin/test_results/TEST-${APP_NAME}_valgrind.xml"
            fi
        fi
    fi
}

#==========================================================
# Run the apps
#==========================================================
runTestApp "tracktion_graph_PerformanceTests" "DISABLE_TOOLS"
runTestApp "tracktion_graph_TestRunner"
runTestApp "TestRunner"
